World world;

public Table [] tables;

public char TheKey;
Table targetTable;


void mousePressed()
{
  int intKey = (new Integer(TheKey)).intValue();
 
  if(intKey == 49)  intKey = 1;
  else if(intKey == 50) intKey = 2;
  else if(intKey == 51) intKey = 3;
  else if(intKey == 52) intKey = 4;
  else  return;
  try{
    int nullTest = tables[intKey].xPosition;}
   catch(NullPointerException npe)  { return;}

  targetTable = tables[intKey];

  tables[intKey].xPosition = mouseX;
  tables[intKey].yPosition = mouseY;
  
  //cleanup
  
  int [] coords = tables[intKey].findCoordsOfRegionToUse(world.getRegionByPosition(mouseX, mouseY));
  if(tables[intKey].acquiringResourceFromRegion == null){}                                    //wasn't acquiring resources before mouseclick
  else if(world.region[coords[0]][coords[1]] != tables[intKey].acquiringResourceFromRegion )  //was acquiring resources before mouseclick
  {
    tables[intKey].acquiringResourceFromRegion.occupiedByTableNumber = -1;                    //free up old region to be used by another table
   } 
  tables[intKey].tryToTakeRegion(intKey, coords[0],coords[1]);
  
  if(!(tables[intKey].tableCompleted(intKey))) //check if that finished off the table
  {
  //System.out.println("table not completed");
  }
  
}


void keyPressed()
{
TheKey = key;
       
}

void setup()
{
  world = new World();                        //create the world object

  
  size(world.worldWidth, world.worldHeight+75);  //define the size of the world/palette
  
  framerate(60);                              //set the refresh rate
  colorMode(RGB,255,255,255,100);           
  smooth();                                   //make shapes primative 
  
  setupTables();

}

void setupTables()
{
  tables = new Table[5]; //table 0 is dead
  tables[0] = null;
  
  for(int i=1; i<5; i++)
  {
    tables[i] = new Table(i);            //create table i
    tables[i].tryToTakeRegion(tables[i].tableNumber, tables[i].regionCoords[0], tables[1].regionCoords[1]);
   }
}

void draw()
{
    background(0);                             //reset background color each time
    
    setupGUI();
    
  
     world.draw();
     
    //***************DEFINE TEXT CHARACTERISTICS**********
     char [] chars = new char[20];
     
     for(int i=0; i<20; i++)
     {
       chars[i] = (char)(i+1);
     }
     //chars[0] = '1'; chars[1] = '2'; chars[2] = '3'; chars[3] = '4';
     textFont(createFont("Arial",8,true,chars));

     for(int i=1; i<tables.length; i++){ //traverse all tables
       if(tables[i].alive) {
         WorldRegion copyOfRegionOccupiedData = world.getRegionByPosition(tables[i].xPosition, tables[i].yPosition);
         
         tables[i].draw();
        
       // if(colorizeToGreen(i))  {System.out.println("call to useResource " + i);
       fill(255,0,0);
        tables[i].useResource(i, copyOfRegionOccupiedData);//}
        
         
         text(i,tables[i].xPosition-2,tables[i].yPosition+3);   //label the tables with their respective number from the array
         fill(255);                                             //reset fill color of tables to white
        
       }
       else {} //table is dead
     }    
     
}  //end draw


boolean onButton = false;

void setupGUI()
{
    fill(100);
    rect(0,202,200,2);
    fill(200);
    rect(0,203,200,1);
    fill(240);
    rect(0,205,200,195);
    
  if((mouseX>102 && mouseX<198 && mouseY>210 && mouseY<230))
  {
    onButton = true;
    fill(230,230,255);
    rect(102,210,96,20);
    fill(100);
    rect(102,210,96,1);  //_____
    rect(102,210,1,20);  // ||
    fill(0,0,255);
   }
  else if((mouseX<=102 || mouseX>=198 || mouseY<=210 || mouseY>=230))
  {
    onButton = false;
    fill(230,230,255);
    rect(102,210,96,20);
    fill(200);
    rect(102,229,96,1);  //_____
    rect(197,210,1,20);  // ||
    fill(0); 
  }
  
  char [] buttontext = {'B', 'u' ,'t' ,'o' ,'n'};

  textFont(createFont("Arial",12,true,buttontext));
  text("Button",115,225); 
}

boolean colorizeToGreen(int tableNumber)
{  
       if(tables[tableNumber].acquiringResourceFromRegion != null && tables[tableNumber].acquiringResourceFromRegion.occupiedByTableNumber == tableNumber)    
       {
         fill(255,0,0); 
       }
       else if(tables[tableNumber].acquiringResourceFromRegion == null)
       {  
             fill(0,255,0);
             return true; 
       }
       else{
           fill(255,255,255);    //should never get here
           while(true);}
       return false;
}

//******************************************************************
//*********** WORLD CLASS *********************************************
//******************************************************************

class World
{
  WorldRegion [][] region;
 
  int worldWidth, worldHeight, worldDepth;
  
  public World()
  {
    this.worldHeight = this.worldWidth = this.worldDepth = 200;
    
    this.region = new WorldRegion[2][2];
    this.region[0][0] = new WorldRegion(0,0,this.worldWidth/2, color(255,0,0));
    this.region[1][0] = new WorldRegion(this.worldWidth/2,0,this.worldWidth/2, color(0,255,0));
    this.region[0][1] = new WorldRegion(0,this.worldHeight/2,this.worldWidth/2, color(0,0,255));
    this.region[1][1] = new WorldRegion(this.worldWidth/2,this.worldHeight/2,this.worldWidth/2, color(255,255,0)); 
    
   //reset all using worldregions's occupiedByTableNumber
    for(int i=0; i<=1; i++)
      for(int j=0; j<=1; j++)
        this.region[i][j].occupiedByTableNumber = -1;   
  }
  
  public WorldRegion getRegionByPosition(int x, int y)
  {
    WorldRegion toReturn;
  
    if(x<this.worldWidth/2 &&  x>0 && y<this.worldHeight/2 && y>0) toReturn = this.region[0][0];
    else if(x>=this.worldWidth/2 && x < this.worldWidth && y<this.worldHeight/2 && y>0)  toReturn = this.region[1][0];
    else if(x<this.worldWidth/2 && x>0 && y < this.worldHeight && y >=this.worldHeight/2)  toReturn = this.region[0][1];
    else if(x>=this.worldWidth/2 && x< this.worldWidth && y>=this.worldWidth/2 && y < this.worldWidth)  toReturn = this.region[1][1];
    else {  return null;} //table is dead
    
    return toReturn;
  }
  
  void draw()
  {
    noStroke();
    for(int i=0; i<=1; i++){
      for(int j=0; j<=1; j++)
      {
        fill(this.region[i][j].regionColor);
        this.region[i][j].draw();
      }
    }
    fill(255);
  }
}  //end World (oh no, armageddon!  Ahhhh!)


//******************************************************************
//*********** WORLDREGION CLASS *********************************************
//******************************************************************

class WorldRegion
{
  int xLeftBound, yTopBound, width;
  color regionColor;
  String regionColorString;
  int occupiedByTableNumber;
  
  
  
  public WorldRegion(int x, int y, int widthIn, color colorIn)
  {
    if(colorIn == color(255,255,0))  this.regionColorString = "yellow";
    else if(colorIn == color(0,0,255))  this.regionColorString = "blue";
    else if(colorIn == color(255,0,0))    this.regionColorString = "red";
    else if(colorIn == color(0,255,0))  this.regionColorString = "green";
    else                  this.regionColorString = "no color, yo" + colorIn; 
    
    this.xLeftBound = x;
    this.yTopBound = y;
    this.width = widthIn;
    this.regionColor = colorIn;
  }
  
  void draw()
  {
       
  
      rect(this.xLeftBound, this.yTopBound, this.width, this.width);
      if(1==2)  //debugging
      {
        fill(0);
        textFont(createFont("Arial",12,true));
        try{
        text(this.occupiedByTableNumber,this.xLeftBound+15,this.yTopBound+15);
        }
        catch(NullPointerException npe)
        {
        text("null",this.xLeftBound+15,this.yTopBound+15);
        }
      }
  }
  
} //end WorldRegion


//******************************************************************
//*********** TABLE CLASS *********************************************
//******************************************************************

class Table{
  Philosopher [] philosopher;;
  int xPosition, yPosition, zPosition;
  //movement bound scheme
  int xLowerRand, xUpperRand, yLowerRand, yUpperRand, tableNumber, radius;

  
  World worldWhereTableExists;             //trivial, no?
  WorldRegion acquiringResourceFromRegion; //null if occupied by another table that is acquiring resources
  
  boolean alive;
  boolean tableCompleted;
  int [] regionCoords;

  public Table(int tableNumberIn)
  {
    this.tableNumber = tableNumberIn;
    this.setPhilosophers(); 
    this.alive = true;
    this.setTablePosition();
    this.worldWhereTableExists = world;  
    this.radius = 10;     
    this.regionCoords = findCoordsOfRegionToUse(world.getRegionByPosition(this.xPosition, this.yPosition)); 
    
    
    this.tableCompleted = false;
    this.setMovementRandomnessBounds();
  }
  
  void setMovementRandomnessBounds()
  {
    this.xLowerRand = this.yLowerRand = -2;
    this.xUpperRand = this.yUpperRand = 2;
  }
  
  boolean tryToTakeRegion(int tableNumber, int regionX, int regionY)
  {
    if(world.region[regionX][regionY].occupiedByTableNumber == -1)
    {
        setRegionToBeOccupiedByTable(tableNumber, regionX, regionY);
        tables[tableNumber].acquiringResourceFromRegion = world.region[regionX][regionY];
        findPhilosopherThatUsesResource(tableNumber, regionX, regionY);
        return true;
    }
    else if(world.region[regionX][regionY].occupiedByTableNumber == tableNumber) //It's me there
    {    tables[tableNumber].acquiringResourceFromRegion = world.region[regionX][regionY];  return true;}
    else if(world.region[regionX][regionY].occupiedByTableNumber != tableNumber)  //someone already there
       tables[tableNumber].acquiringResourceFromRegion = null;
       
    return false;
        
  }
  
  void setTablePosition()
  {
    this.xPosition = (int)random(25,world.worldWidth-25);
    this.yPosition = (int)random(25,world.worldHeight-25);
  }
  
  void setPhilosophers()
  {
    this.philosopher = new Philosopher[5];  //0 doesn't exist
    
    for(int i=0; i<=4; i++)
       this.philosopher[i] = new Philosopher(this, (i+1)*3, 4);
  }
  
  public int[] getRandomPosition()
  {
    int position[] = new int[2];
    
      position[0] = (int)random(this.xLowerRand,this.xUpperRand);
      position[1] = (int)random(this.yLowerRand,this.yUpperRand);
     return position;
  }
  
  int [] findCoordsOfRegionToUse(WorldRegion regionAboutToBeUsed)
  {
    int [] coords = new int[2];
  
     for(int i=0; i<=1; i++) 
       for(int j=0; j<=1; j++)
         if(regionAboutToBeUsed == world.region[i][j])
         {  coords[0]=i; coords[1]=j; return coords;}
     
     
     return null;
  }
  
  void regionOccupied_ResetTable(int tableNumber)
  {
   try{
        tables[tableNumber].acquiringResourceFromRegion.occupiedByTableNumber = -1;}
   catch(NullPointerException npe) {}
                
    tables[tableNumber].acquiringResourceFromRegion = null;
  }
  
  void setRegionToBeOccupiedByTable(int tableNumber, int x, int y)
  {
    //relinquish
    
    if(this.acquiringResourceFromRegion!=null && this.acquiringResourceFromRegion.occupiedByTableNumber == tableNumber)  this.acquiringResourceFromRegion.occupiedByTableNumber = -1;
    world.region[x][y].occupiedByTableNumber = tableNumber;
  }
  
  
  void findPhilosopherThatUsesResource(int tableNum, int x, int y)
  {
    for(int p=0; p<tables[tableNum].philosopher.length; p++){
       if(world.region[x][y].regionColor == tables[tableNum].philosopher[p].philosopherColor)
       {
         tables[tableNum].philosopher[p].requirementsFulfilled = true;
         tables[tableNum].philosopher[p].philosopherColor = color(0,0,0);
         System.out.println();
         for(int i=0; i<2; i++)
           for(int j=0; j<2; j++)
             System.out.print("[ " +world.region[i][j].occupiedByTableNumber + " ] ");
         
         System.out.println();
         if(tableCompleted(tableNum));
         break;
       }
    }
  }
  
  boolean tableCompleted(int tableNumber)
  {
    boolean settingToWhite = false;
    int p;
    for(p=1; p<tables[tableNumber].philosopher.length; p++)
    {  
        
        if(!(tables[tableNumber].philosopher[p].requirementsFulfilled))  break;
        
        
        if(p==3)  {System.out.println("Table done");
          tables[tableNumber].tableCompleted = true; 
          tables[tableNumber].philosopher[p].requirementsFulfilled = true; 
          this.radius = this.radius*2;
          //reset philosophers
          int philRadius = (int)(this.philosopher[0].radius*1.5);
          tables[tableNumber].philosopher = null;
          tables[tableNumber].philosopher = new Philosopher[5];
          
          //4 new tables
          Table [] newTable = new Table[tables.length+4];
          int ii;
          for(ii=0; ii<tables.length; ii++)
          {
            newTable[ii]=tables[ii];
          }
          System.out.println(ii + " " + tables.length + " " + newTable.length);
          tables = newTable;
          for(int jj = ii; jj<newTable.length; jj++)
          {
            newTable[jj] = new Table(jj);
            newTable[jj].tryToTakeRegion(newTable[jj].tableNumber, newTable[jj].regionCoords[0], newTable[jj].regionCoords[1]);
            System.out.println(jj);
          }
          
          
          
          for(int i=0; i<=4; i++)
             this.philosopher[i] = new Philosopher(this, (i+1)*3, philRadius);
          //tables[tableNumber].xLowerRand = tables[tableNumber].xUpperRand = tables[tableNumber].yLowerRand = tables[tableNumber].yUpperRand = 0;}
         }
    }
    
    
  
  return false;
  }
  
  void finishTableTemp(int tableNumber)
  {
  int p;
    for(p=1; p<tables[tableNumber].philosopher.length; p++)
      tables[tableNumber].philosopher[p].philosopherColor = color(255,255,255);
      tables[tableNumber].xLowerRand = tables[tableNumber].xUpperRand = tables[tableNumber].yLowerRand = tables[tableNumber].yUpperRand = 0;
      tables[tableNumber].tableCompleted = true;
      System.out.println("done");
  }
  
  void useResource(int tableNumber, WorldRegion regionTableIsIn)
  { 
  
    int [] coordsOfRegion = findCoordsOfRegionToUse(regionTableIsIn);
    int x, y;
        try{x = coordsOfRegion[0]; y = coordsOfRegion[1];}
    catch(NullPointerException npe)  {return;}
    
    regionTableIsIn = world.region[x][y];
  
    if(coordsOfRegion == null)  {System.out.println("1");}
    else if(regionTableIsIn.occupiedByTableNumber != tableNumber && regionTableIsIn.occupiedByTableNumber != -1)  //right region, table not current
        {regionOccupied_ResetTable(tableNumber);}
    else if(regionTableIsIn.occupiedByTableNumber == -1)  //correct region found and empty
    {
        if(this.tryToTakeRegion(tableNumber, x, y))
        
          setRegionToBeOccupiedByTable(tableNumber,x,y);  
        
        findPhilosopherThatUsesResource(tableNumber, x, y);            
     }
     else if(regionTableIsIn.occupiedByTableNumber == tableNumber){}
     else System.out.println("error");

  }

  void setNewCoordinatesOfTable(int d[])
  {
    this.xPosition += d[0];
    this.yPosition += d[1];
  }
  
  boolean tableDrawn()
  {
    if(this.alive)
    {
      stroke(100);
      if(this.tableCompleted) {}// fill(0);
      ellipse(this.xPosition, this.yPosition, this.radius,this.radius); //draw table
      fill(255);
      noStroke();
      return true;
    }
    
    return false;
  }
  
 void drawPhilosophers()
 {
     for(int p=0; p<this.philosopher.length; p++) //draw philosophers at above table
     {
       this.philosopher[p].draw();
     } 
 }
 
 boolean tableOutOfBounds()
 {
   if(this.xPosition<0 || this.xPosition > world.worldWidth || this.yPosition < 0 || this.yPosition > world.worldWidth)
     return true;
    
    return false;
 }
 
 void resetAffectedAttributesBecauseOfDeath()
 {
   this.alive = false;
  if(this.acquiringResourceFromRegion != null)  
   {
     this.acquiringResourceFromRegion.occupiedByTableNumber = -1;
     
   }  
 }
  void draw()
  {
   this.setNewCoordinatesOfTable(getRandomPosition());
   if(this.tableDrawn())
       this.drawPhilosophers();
   
   int radiusTemp = this.radius;
   int shadeOfRed = 100; //100=>150=200=>250
   while(radiusTemp > 10)
   {
     fill(shadeOfRed,0,0);
     ellipse(this.xPosition, this.yPosition, radiusTemp/2,radiusTemp/2); //draw table
     fill(255);
     ellipse(this.xPosition, this.yPosition, radiusTemp/2-2,radiusTemp/2-2); //draw table
     radiusTemp = radiusTemp/2;
     shadeOfRed += 50;
   }
   
   
   if(tableOutOfBounds())
       resetAffectedAttributesBecauseOfDeath();


   fill(255);
   } //end draw

 }

//******************************************************************
//*********** PHILOSOPHER CLASS *********************************************
//******************************************************************

class Philosopher {
  int resource1, resource2;
  color philosopherColor;
  int clockPosition;
  Table table;
  boolean requirementsFulfilled;
  int radius;
  
  
  
  
  public Philosopher(Table tableIn, int clockPositionIn, int radiusIn)
  {
    this.table = tableIn;

    this.clockPosition = clockPositionIn;
    this.radius = radiusIn;
    //set color based on clockPosition
    if(clockPosition == 12)  this.philosopherColor = color(0,255,0);
    else if(clockPosition == 3)  this.philosopherColor = color(0,0,255);
    else if(clockPosition == 6)  this.philosopherColor = color(255,0,0);
    else if(clockPosition == 9)  this.philosopherColor = color(255,255,0);
    
    this.requirementsFulfilled = false;
    
    
  }
  
  void draw()
  {
    float displacement = (int)(.7*this.table.radius);
    fill(this.philosopherColor);
    if(this.clockPosition == 3){
      ellipse(table.xPosition+displacement, table.yPosition,this.radius,this.radius);}
    else if(this.clockPosition == 6){
       ellipse(table.xPosition, table.yPosition+displacement,this.radius,this.radius);}
    else if(this.clockPosition == 9){
      ellipse(table.xPosition-displacement, table.yPosition,this.radius,this.radius);}
   else if(this.clockPosition == 12){
      ellipse(table.xPosition, table.yPosition-displacement,this.radius,this.radius);}
   
  } //end draw

} //end philosopher class




 
 
 
 
 
 

